/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace NodeStaking {
  export type StakeStruct = {
    amount: BigNumberish;
    startTime: BigNumberish;
    rewardPaid: BigNumberish;
  };

  export type StakeStructOutput = [
    amount: bigint,
    startTime: bigint,
    rewardPaid: bigint
  ] & { amount: bigint; startTime: bigint; rewardPaid: bigint };
}

export interface NodeStakeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "calculateAllPendingRewards"
      | "calculateReward"
      | "claimRewards"
      | "deadWallet"
      | "earlyUnstake"
      | "earlyUnstakePenality"
      | "getUserStakingDetails"
      | "getWalletClaimableRewards"
      | "getWalletReward"
      | "getWalletStaked"
      | "getWalletStakes"
      | "isStaker"
      | "maxPerWallet"
      | "maxTotalStaked"
      | "migrate"
      | "owner"
      | "paused"
      | "remainingRewards"
      | "renounceOwnership"
      | "setMaxPerWallet"
      | "setMaxTotalStaked"
      | "setPaused"
      | "setStakingToken"
      | "stake"
      | "stakers"
      | "stakes"
      | "stakingPeriod"
      | "stakingToken"
      | "totalRewards"
      | "totalStaked"
      | "totalUserRewards"
      | "transferOwnership"
      | "transferRewards"
      | "unstake"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Migrated"
      | "OwnershipTransferred"
      | "Paused"
      | "RewardPaid"
      | "Staked"
      | "Unpaused"
      | "Unstaked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "calculateAllPendingRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateReward",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deadWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "earlyUnstake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "earlyUnstakePenality",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakingDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletClaimableRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletStaked",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletStakes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isStaker",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxPerWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTotalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "remainingRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPerWallet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTotalStaked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setStakingToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakes",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUserRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateAllPendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deadWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "earlyUnstake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earlyUnstakePenality",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakingDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletClaimableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isStaker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTotalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remainingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTotalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUserRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
}

export namespace MigratedEvent {
  export type InputTuple = [
    newStakingContract: AddressLike,
    tokenAmount: BigNumberish,
    ethAmount: BigNumberish
  ];
  export type OutputTuple = [
    newStakingContract: string,
    tokenAmount: bigint,
    ethAmount: bigint
  ];
  export interface OutputObject {
    newStakingContract: string;
    tokenAmount: bigint;
    ethAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardPaidEvent {
  export type InputTuple = [user: AddressLike, reward: BigNumberish];
  export type OutputTuple = [user: string, reward: bigint];
  export interface OutputObject {
    user: string;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    index: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, index: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnstakedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    index: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, index: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NodeStake extends BaseContract {
  connect(runner?: ContractRunner | null): NodeStake;
  waitForDeployment(): Promise<this>;

  interface: NodeStakeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calculateAllPendingRewards: TypedContractMethod<[], [bigint], "view">;

  calculateReward: TypedContractMethod<
    [_user: AddressLike, _index: BigNumberish],
    [bigint],
    "view"
  >;

  claimRewards: TypedContractMethod<[], [void], "nonpayable">;

  deadWallet: TypedContractMethod<[], [string], "view">;

  earlyUnstake: TypedContractMethod<
    [_index: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  earlyUnstakePenality: TypedContractMethod<[], [bigint], "view">;

  getUserStakingDetails: TypedContractMethod<
    [_user: AddressLike],
    [
      [bigint, bigint, bigint[]] & {
        _totalStaked: bigint;
        totalRewardsInEth: bigint;
        timeElapsedPerStake: bigint[];
      }
    ],
    "view"
  >;

  getWalletClaimableRewards: TypedContractMethod<
    [_user: AddressLike],
    [bigint],
    "view"
  >;

  getWalletReward: TypedContractMethod<[_user: AddressLike], [bigint], "view">;

  getWalletStaked: TypedContractMethod<[_user: AddressLike], [bigint], "view">;

  getWalletStakes: TypedContractMethod<
    [_user: AddressLike],
    [NodeStaking.StakeStructOutput[]],
    "view"
  >;

  isStaker: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  maxPerWallet: TypedContractMethod<[], [bigint], "view">;

  maxTotalStaked: TypedContractMethod<[], [bigint], "view">;

  migrate: TypedContractMethod<
    [_newStakingContract: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  remainingRewards: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setMaxPerWallet: TypedContractMethod<
    [_maxPerWallet: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxTotalStaked: TypedContractMethod<
    [_maxTotalStaked: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPaused: TypedContractMethod<[_paused: boolean], [void], "nonpayable">;

  setStakingToken: TypedContractMethod<
    [_stakingToken: AddressLike],
    [void],
    "nonpayable"
  >;

  stake: TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  stakers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  stakes: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        amount: bigint;
        startTime: bigint;
        rewardPaid: bigint;
      }
    ],
    "view"
  >;

  stakingPeriod: TypedContractMethod<[], [bigint], "view">;

  stakingToken: TypedContractMethod<[], [string], "view">;

  totalRewards: TypedContractMethod<[], [bigint], "view">;

  totalStaked: TypedContractMethod<[], [bigint], "view">;

  totalUserRewards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferRewards: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  unstake: TypedContractMethod<
    [_index: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateAllPendingRewards"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateReward"
  ): TypedContractMethod<
    [_user: AddressLike, _index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deadWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "earlyUnstake"
  ): TypedContractMethod<
    [_index: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "earlyUnstakePenality"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserStakingDetails"
  ): TypedContractMethod<
    [_user: AddressLike],
    [
      [bigint, bigint, bigint[]] & {
        _totalStaked: bigint;
        totalRewardsInEth: bigint;
        timeElapsedPerStake: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWalletClaimableRewards"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWalletReward"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWalletStaked"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWalletStakes"
  ): TypedContractMethod<
    [_user: AddressLike],
    [NodeStaking.StakeStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isStaker"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxPerWallet"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxTotalStaked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "migrate"
  ): TypedContractMethod<
    [_newStakingContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "remainingRewards"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxPerWallet"
  ): TypedContractMethod<[_maxPerWallet: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxTotalStaked"
  ): TypedContractMethod<[_maxTotalStaked: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPaused"
  ): TypedContractMethod<[_paused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStakingToken"
  ): TypedContractMethod<[_stakingToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "stakes"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        amount: bigint;
        startTime: bigint;
        rewardPaid: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "stakingPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stakingToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalRewards"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalStaked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalUserRewards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferRewards"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unstake"
  ): TypedContractMethod<
    [_index: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Migrated"
  ): TypedContractEvent<
    MigratedEvent.InputTuple,
    MigratedEvent.OutputTuple,
    MigratedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RewardPaid"
  ): TypedContractEvent<
    RewardPaidEvent.InputTuple,
    RewardPaidEvent.OutputTuple,
    RewardPaidEvent.OutputObject
  >;
  getEvent(
    key: "Staked"
  ): TypedContractEvent<
    StakedEvent.InputTuple,
    StakedEvent.OutputTuple,
    StakedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Unstaked"
  ): TypedContractEvent<
    UnstakedEvent.InputTuple,
    UnstakedEvent.OutputTuple,
    UnstakedEvent.OutputObject
  >;

  filters: {
    "Migrated(address,uint256,uint256)": TypedContractEvent<
      MigratedEvent.InputTuple,
      MigratedEvent.OutputTuple,
      MigratedEvent.OutputObject
    >;
    Migrated: TypedContractEvent<
      MigratedEvent.InputTuple,
      MigratedEvent.OutputTuple,
      MigratedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RewardPaid(address,uint256)": TypedContractEvent<
      RewardPaidEvent.InputTuple,
      RewardPaidEvent.OutputTuple,
      RewardPaidEvent.OutputObject
    >;
    RewardPaid: TypedContractEvent<
      RewardPaidEvent.InputTuple,
      RewardPaidEvent.OutputTuple,
      RewardPaidEvent.OutputObject
    >;

    "Staked(address,uint256,uint256)": TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;
    Staked: TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Unstaked(address,uint256,uint256)": TypedContractEvent<
      UnstakedEvent.InputTuple,
      UnstakedEvent.OutputTuple,
      UnstakedEvent.OutputObject
    >;
    Unstaked: TypedContractEvent<
      UnstakedEvent.InputTuple,
      UnstakedEvent.OutputTuple,
      UnstakedEvent.OutputObject
    >;
  };
}
